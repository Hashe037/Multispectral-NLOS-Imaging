%find errors for each ground

% Outputs
% metric_each_dict --
% metric_total_dict --
% Sinc_nmf/bss/jade/sobi/pca_total --
%
%
%Supported:
%Spat
%DFOV
%CP 
%MS-DFOV
%NMF
%BSS
%SOBI
%JADE
%PCA
%
%todo
%-check to make sure constants (compperi,coef_multiple) are correct

% function[metric_each_dict,metric_all]  = find_reconstruction_metrics
function[recmet_dict] ...
    = findReconstructionMetrics(ground_params,results_agnostic,results_precon,results_jade,results_mscpa)

power_diff = @(x,y) abs(max(abs(x(:)))-max(abs(y(:))))/max(max(abs(x(:))),max(abs(y(:))));
num_vants = length(results_agnostic.Sinc_ground{1}); %total incident divisions

do_precon = isfield(results_precon,'Sinc_precon');
do_jade = isfield(results_jade,'Sinc_jade');
do_mscpa = isfield(results_mscpa,'Sinc_mscpa');

spec_ground = ground_params.spec_ground;

%% dictionaries to return
recmet_dict = struct(); %reconstruction metrics
recmet_dict.each = struct(); %errors between each object and its best reconstruction
recmet_dict.each.mse = struct(); %non-normalized MSE
recmet_dict.each.shape = struct(); %normalized MSE
recmet_dict.each.powdif = struct(); %difference in "power" where power is defined by us

recmet_dict.total = struct(); %errors between all objects and all reconstructions
recmet_dict.total.mse = struct(); %non-normalized MSE
recmet_dict.total.shape = struct(); %normalized MSE
recmet_dict.total.powdif = struct(); %difference in "power" where power is defined by us

%% upsample Sincls (later is redundant)

if do_precon
    Sinc_precon_up = {};
    Sinc_noprecon_up = {};
    num_vants_precon = length(results_precon.Sinc_precon{1});
    for spec_c = 1:numSpecs
        Sinc_precon_up{spec_c} = interp1(results_precon.Sinc_precon{spec_c}, linspace(1,num_vants_precon,num_vants));
        Sinc_noprecon_up{spec_c} = interp1(results_precon.Sinc_noprecon{spec_c}, linspace(1,num_vants_precon,num_vants));
    end
end

%% find metrics between EACH ground and best corresponding reconstruction
%Summed over all spectra

%bss
for ground_i=1:num_ground
    Sinc_ground_i = results_agnostic.Sinc_ground{ground_i}.*sum(spec_ground(ground_i,:));
    coeff_multiple = 1;

    %agnostic (sum over all spectra)
    Sinc_tot = sum_cell(results_agnostic.Sinc);
    recmet_dict.each.mse.agnostic(ground_i) = nansum((-Sinc_tot*coeff_multiple+Sinc_ground_i).^2)/num_vants;
    recmet_dict.each.shape.agnostic(ground_i) = nansum((-Sinc_tot/norm(Sinc_tot)+Sinc_ground_i/norm(Sinc_ground_i)).^2)/num_vants;
    recmet_dict.each.powdif.agnostic(ground_i) = power_diff(Sinc_tot*coeff_multiple,Sinc_ground_i);

    %single spectra filtered
    Sinc_singfilt = results_agnostic.Sinc_singfilt;
    recmet_dict.each.mse.filt(ground_i) = nansum((-sum_cell(Sinc_singfilt)*sum(spec_ground(ground_i,:))*coeff_multiple+Sinc_ground_i).^2)/num_vants;
    recmet_dict.each.shape.filt(ground_i) = nansum((-sum_cell(Sinc_singfilt)/norm(sum_cell(Sinc_singfilt))+Sinc_ground_i/norm(Sinc_ground_i)).^2)/num_vants;
    recmet_dict.each.powdif.filt(ground_i) = power_diff(sum_cell(Sinc_singfilt)*sum(spec_ground(ground_i,:))*coeff_multiple,Sinc_ground_i);


    %NMF metrics
    if run_nmf == 0
        recmet_dict.each.mse.nmf(ground_i) = nan;
        recmet_dict.each.shape.nmf(ground_i) = nan;
        recmet_dict.each.powdif.nmf(ground_i) = nan;
    else
        [recmet_dict.each.shape.nmf(ground_i),recmet_dict.each.mse.nmf(ground_i),recmet_dict.each.powdif.nmf(ground_i)] ...
                = calculate_metrics_withbest_single(Sinc_nmf_best{ground_i},nmf_best_i(ground_i),1,Hnmf,coeff_multiple,Sinc_ground_i,power_diff,each_ver);
    end

    %BSS metrics
    if run_bss == 0
        recmet_dict.each.mse.bss(ground_i) = nan;
        recmet_dict.each.shape.bss(ground_i) = nan;
        recmet_dict.each.powdif.bss(ground_i) = nan;
    else
        [recmet_dict.each.shape.bss(ground_i),recmet_dict.each.mse.bss(ground_i),recmet_dict.each.powdif.bss(ground_i)] ...
                = calculate_metrics_withbest_single(Sinc_bss_best{ground_i},bss_best_i(ground_i),1,Hbss,coeff_multiple,Sinc_ground_i,power_diff,each_ver);
    end
    
    %Multilayer NMF metrics
    if run_mlay == 0
        recmet_dict.each.mse.mlay(ground_i) = nan;
        recmet_dict.each.shape.mlay(ground_i) = nan;
        recmet_dict.each.powdif.mlay(ground_i) = nan;
    else
        [recmet_dict.each.shape.mlay(ground_i),recmet_dict.each.mse.mlay(ground_i),recmet_dict.each.powdif.mlay(ground_i)] ...
                = calculate_metrics_withbest_single(Sinc_mlay_best{ground_i},mlay_best_i(ground_i),1,Hmlay,coeff_multiple,Sinc_ground_i,power_diff,each_ver);
    end

    %SOBI/ICA metrics
    if run_sobi == 0
        recmet_dict.each.mse.sobi(ground_i) = nan;
        recmet_dict.each.shape.sobi(ground_i) = nan;
        recmet_dict.each.powdif.sobi(ground_i) = nan;
    else
        [recmet_dict.each.shape.sobi(ground_i),recmet_dict.each.mse.sobi(ground_i),recmet_dict.each.powdif.sobi(ground_i)] ...
                = calculate_metrics_withbest_single(Sinc_sobi_best{ground_i},sobi_best_i(ground_i),1,Hsobi,coeff_multiple,Sinc_ground_i,power_diff,each_ver);
    end

    %%JADE/ICA metrics
    if run_jade == 0
        recmet_dict.each.mse.jade(ground_i) = nan;
        recmet_dict.each.shape.jade(ground_i) = nan;
        recmet_dict.each.powdif.jade(ground_i) = nan;
    else
        [recmet_dict.each.shape.jade(ground_i),recmet_dict.each.mse.jade(ground_i),recmet_dict.each.powdif.jade(ground_i)] ...
                = calculate_metrics_withbest_single(Sinc_jade_best{ground_i},jade_best_i(ground_i),1,Hjade,coeff_multiple,Sinc_ground_i,power_diff,each_ver);
%             jade_mse{ground_i}(spec_c) =  nansum((-Sinc_jade_best*Hjade(jade_best_i,spec_c)*coeff_multiple+Sinc_g).^2)/total_spots;
%             jade_shape_mse{ground_i}(spec_c) = nansum((-Sinc_jade_best/norm(Sinc_jade_best)+Sinc_g/norm(Sinc_g)).^2)/total_spots;
%             jade_pow_dif{ground_i}(spec_c) = power_diff(Sinc_jade_best*Hjade(jade_best_i,spec_c)*coeff_multiple,Sinc_g);
    end

    %PCA metrics
    if run_pca
%                 if pca_type == 1 %leftover pca is light field
%         %             pca_mse(spec_c) = nansum((-Sinc_pca{spec_c}*coeff_multiple+Sinc_g).^2)/total_spots; %assume its white so no change over spectrum   
%                     recmet_dict.each.mse.pca(ground_i) = nan;
%                     recmet_dict.each.shape.pca(ground_i) = nan;
%                     recmet_dict.each.powdif.pca(ground_i) = nan;
%                 else %separated into two components
            [recmet_dict.each.shape.pca(ground_i),recmet_dict.each.mse.pca(ground_i),recmet_dict.each.powdif.pca(ground_i)] ...
                = calculate_metrics_withbest_single(Sinc_pca_best{ground_i},pca_best_i(ground_i),1,Hpca,coeff_multiple,Sinc_ground_i,power_diff,each_ver);
%                 end
    end

    %least-squares/computational periscopy metrics
    if do_ls
        Sinc_g_down = Sinc_g{ground_i}(round(linspace(1,length(Sinc_g{ground_i}),length(Sinc_ls{1,1}))));
        total_spots2 = length(Sinc_ls{1,1});

        %need to upsample so that the error metrics align better with each
        %other
        Sinc_ls_tot = sum_cell(Sinc_ls);
        Sinc_ls_tot_up = interp1(Sinc_ls_tot, linspace(1,total_spots2,num_vants));
        Sinc_g_ls_tot_up = interp1(sum_cell({Sinc_g_ls},inten_coeff'.*sum(spec_ground,2)), linspace(1,total_spots2,num_vants));
          %original sample
%         ls_best_mse(spec_c) = nansum((Sinc_ls{spec_c}*comp_peri_coeff*coeff_multiple-Sinc_g_ls*comp_peri_coeff).^2)/total_spots2;
%         ls_best_shape_mse(spec_c) = nansum((Sinc_ls{spec_c}/norm(Sinc_ls{spec_c})-Sinc_g_ls/norm(Sinc_g_ls)).^2)/total_spots2;
%         ls_best_pow_dif(spec_c) = power_diff(Sinc_ls{spec_c}*comp_peri_coeff*coeff_multiple,Sinc_g_ls*comp_peri_coeff);

            %up sample
        recmet_dict.each.mse.ls(ground_i) = nansum((Sinc_ls_tot_up*comp_peri_coeff*coeff_multiple-Sinc_g_ls_tot_up*comp_peri_coeff).^2)/num_vants;
        recmet_dict.each.shape.ls(ground_i) = nansum((Sinc_ls_tot_up/norm(Sinc_ls_tot_up)-Sinc_g_ls_tot_up/norm(Sinc_g_ls_tot_up)).^2)/num_vants;
        recmet_dict.each.powdif.ls(ground_i) = power_diff(Sinc_ls_tot_up*comp_peri_coeff*coeff_multiple,Sinc_g_ls_tot_up*comp_peri_coeff);
    else
        recmet_dict.each.mse.ls(ground_i) = nan; 
        recmet_dict.each.shape.ls(ground_i) = nan; 
        recmet_dict.each.powdif.ls(ground_i) = nan; 
    end


    if do_precon
        Sinc_precon_g_up = interp1(Sinc_precon_g{ground_i}.*inten_coeff(ground_i).*sum(spec_ground(ground_i,:)), linspace(1,num_vants_precon,num_vants));
        
        recmet_dict.each.mse.precon(ground_i) = nansum((sum_cell(Sinc_precon_up)*coeff_multiple-Sinc_precon_g_up).^2)/num_vants;
        recmet_dict.each.shape.precon(ground_i) = nansum((sum_cell(Sinc_precon_up)/norm(sum_cell(Sinc_precon_up))-Sinc_precon_g_up/norm(Sinc_precon_g_up)).^2)/num_vants;
        recmet_dict.each.powdif.precon(ground_i) = power_diff(sum_cell(Sinc_precon_up)*coeff_multiple,Sinc_precon_g_up);

        recmet_dict.each.mse.precon(ground_i) = nansum((sum_cell(Sinc_noprecon_up)*coeff_multiple-Sinc_precon_g_up).^2)/num_vants;
        recmet_dict.each.shape.precon(ground_i) = nansum((sum_cell(Sinc_noprecon_up)/norm(sum_cell(Sinc_noprecon_up))-Sinc_precon_g_up/norm(Sinc_precon_g_up)).^2)/num_vants;
        recmet_dict.each.powdif.precon(ground_i) = power_diff(sum_cell(Sinc_noprecon_up)*coeff_multiple,Sinc_precon_g_up);

    else
        recmet_dict.each.mse.precon(ground_i) = nan; 
        recmet_dict.each.shape.precon(ground_i) = nan; 
        recmet_dict.each.powdif.precon(ground_i) = nan; 
        recmet_dict.each.mse.noprecon(ground_i) = nan; 
        recmet_dict.each.shape.noprecon(ground_i) = nan; 
        recmet_dict.each.powdif.noprecon(ground_i) = nan; 
    end
    

end

%MS-DFOV
%NOTE: MS-DFOV does objects different than BSS, so not exact comparison
%need to group by colors for this to work

%relaxation MSE
if runRelaxation == 0
    recmet_dict.each.mse.msdfov(ground_i) = nan;
    recmet_dict.each.shape.msdfov(ground_i) = nan;
    recmet_dict.each.powdif.msdfov(ground_i) = nan;
else
    Sinc_ground_i = Sinc_g{ground_i}*(inten_coeff(ground_i).*sum(spec_ground(ground_i,msdfov_specs))); %is this right inten coeff?

    recmet_dict.each.mse.msdfov(ground_i) = nansum((-Sinc_msdfov*coeff_multiple+Sinc_ground_i).^2)/num_vants;
    recmet_dict.each.shape.msdfov(ground_i) = nansum((-Sinc_msdfov/norm(Sinc_msdfov)+Sinc_ground_i/norm(Sinc_ground_i)).^2)/num_vants;
    recmet_dict.each.powdif.msdfov(ground_i) = power_diff(Sinc_msdfov*coeff_multiple,Sinc_ground_i);
end


%if object constant, take as average across spectra
% [bss_mse,bss_i] = min([nansum((-Sinc_bss{1}*mean(H(1,:))*coeff_multiple+Sinc_g).^2),nansum((-Sinc_bss{2}*mean(H(1,:))*coeff_multiple+Sinc_g).^2)]/total_spots);
% [bss_shape_mse,bss_shape_i] = min([nansum((-Sinc_bss{1}/norm(Sinc_bss{1})+Sinc_g/norm(Sinc_g)).^2),nansum((-Sinc_bss{2}/norm(Sinc_bss{2})+Sinc_g/norm(Sinc_g)).^2)]/total_spots);

%FOR FAIR COMPARISONS BETWEEN DIFFERENT INTENSITY COEFFICIENTS, MUST DIVIDE
%RESULT BY THE INTEN_COEFF^2

%% Compute MSE between versions and TOTAL ground 
num_vants = length(Sinc_g{1}); %total incident divisions
total_ver = 2;
bss_ver = 1;
if isfield(bss_params,'bss_ver')
    bss_ver = bss_params.bss_ver;
end

if total_ver==1 %each spec
    %BSS
    for spec_c = 1:numSpecs %error is in comparison to spectra spec_c
        if ground_one_source
            Sinc_ground_i = Sinc_onesource{spec_c};
        else
            Sinc_ground_i = sum_cell(Sinc_g,inten_coeff'.*spec_ground(:,spec_c));
        end
    %     coeff_multiple = 1/(inten_coeff(ground_i)*spec_ground(spec_c));
        coeff_multiple = 1;

        %standards MSEs
        recmet_dict.total.mse.spat(spec_c) = nansum((-sum_cell(Sinc_spat)+Sinc_ground_i).^2)/num_vants;
        recmet_dict.total.shape.spat(spec_c) = nansum((-sum_cell(Sinc_spat)/norm(sum_cell(Sinc_spat))+Sinc_ground_i/norm(Sinc_ground_i)).^2)/num_vants;
        recmet_dict.total.powdif.spat(spec_c) = power_diff(sum_cell(Sinc_spat),Sinc_ground_i);
        recmet_dict.total.mse.dfov(spec_c) = nansum((-sum_cell(Sinc)+Sinc_ground_i).^2)/num_vants;
        recmet_dict.total.shape.dfov(spec_c) = nansum((-sum_cell(Sinc)/norm(sum_cell(Sinc))+Sinc_ground_i/norm(Sinc_ground_i)).^2)/num_vants;
        recmet_dict.total.powdif.dfov(spec_c) = power_diff(sum_cell(Sinc),Sinc_ground_i);
        recmet_dict.total.mse.filt(spec_c) = nansum((-sum_cell(Sinc_filt)*sum(:,spec_c)+Sinc_ground_i).^2)/num_vants;
        recmet_dict.total.shape.filt(spec_c) = nansum((-sum_cell(Sinc_filt)/norm(sum_cell(Sinc_filt))+Sinc_ground_i/norm(Sinc_ground_i)).^2)/num_vants;
        recmet_dict.total.powdif.filt(spec_c) = power_diff(sum_cell(Sinc_filt),Sinc_ground_i);
        recmet_dict.total.mse.filt2(spec_c) = nansum((-sum_cell_2d(Sinc_filt2)+Sinc_ground_i).^2)/num_vants;
        recmet_dict.total.shape.filt2(spec_c) = nansum((-sum_cell_2d(Sinc_filt2)/norm(sum_cell_2d(Sinc_filt2))+Sinc_ground_i/norm(Sinc_ground_i)).^2)/num_vants;
        recmet_dict.total.powdif.filt2(spec_c) = power_diff(sum_cell_2d(Sinc_filt2)*sum(:,spec_c),Sinc_ground_i);
        recmet_dict.total.mse.cp(spec_c) = nansum((-Sinc_cp+Sinc_ground_i).^2)/num_vants;
        recmet_dict.total.shape.cp(spec_c) = nansum((-Sinc_cp/norm(Sinc_cp)+Sinc_ground_i/norm(Sinc_ground_i)).^2)/num_vants;
        recmet_dict.total.powdif.cp(spec_c) = power_diff(-Sinc_cp,Sinc_ground_i);


        %NMF metrics
        if run_nmf == 0
            recmet_dict.total.mse.nmf(spec_c) = nan;
            recmet_dict.total.shape.nmf(spec_c) = nan;
            recmet_dict.total.powdif.nmf(spec_c) = nan;
        else
            [recmet_dict.total.shape.nmf(spec_c),recmet_dict.total.mse.nmf(spec_c),recmet_dict.total.powdif.nmf(spec_c),Sinc_nmf_total{spec_c}] ...
                    = calculate_metrics_total(Sinc_nmf_best,nmf_best_i,spec_c,Hnmf,coeff_multiple,Sinc_ground_i,power_diff);
        end

        %BSS metrics
        if run_bss == 0
            recmet_dict.total.mse.bss(spec_c) = nan;
            recmet_dict.total.shape.bss(spec_c) = nan;
            recmet_dict.total.powdif.bss(spec_c) = nan;
            Sinc_bss_total{spec_c} = nan;
        else
            [recmet_dict.total.shape.bss(spec_c),recmet_dict.total.mse.bss(spec_c),recmet_dict.total.powdif.bss(spec_c),Sinc_bss_total{spec_c}] ...
                    = calculate_metrics_total(Sinc_bss_best,bss_best_i,spec_c,Hbss,coeff_multiple,Sinc_ground_i,power_diff);
        end
        
        %MLAY metrics
        if run_mlay == 0
            recmet_dict.total.mse.mlay(spec_c) = nan;
            recmet_dict.total.shape.mlay(spec_c) = nan;
            recmet_dict.total.powdif.mlay(spec_c) = nan;
            Sinc_mlay_total{spec_c} = nan;
        else
            [recmet_dict.total.shape.mlay(spec_c),recmet_dict.total.mse.mlay(spec_c),recmet_dict.total.powdif.mlay(spec_c),Sinc_mlay_total{spec_c}] ...
                    = calculate_metrics_total(Sinc_mlay_best,mlay_best_i,spec_c,Hmlay,coeff_multiple,Sinc_ground_i,power_diff);
        end

        %SOBI/ICA metrics
        if run_sobi == 0
            recmet_dict.total.mse.sobi(spec_c) = nan;
            recmet_dict.total.shape.sobi(spec_c) = nan;
            recmet_dict.total.powdif.sobi(spec_c) = nan;
        else
            [recmet_dict.total.shape.sobi(spec_c),recmet_dict.total.mse.sobi(spec_c),recmet_dict.total.powdif.sobi(spec_c),Sinc_sobi_total{spec_c}] ...
                    = calculate_metrics_total(Sinc_sobi_best,sobi_best_i,spec_c,Hsobi,coeff_multiple,Sinc_ground_i,power_diff);
        end

        %%JADE/ICA metrics
        if run_jade == 0
            recmet_dict.total.mse.jade(spec_c) = nan;
            recmet_dict.total.shape.jade(spec_c) = nan;
            recmet_dict.total.powdif.jade(spec_c) = nan;
        else
            [recmet_dict.total.shape.jade(spec_c),recmet_dict.total.mse.jade(spec_c),recmet_dict.total.powdif.jade(spec_c),Sinc_jade_total{spec_c}] ...
                    = calculate_metrics_total(Sinc_jade_best,jade_best_i,spec_c,Hjade,coeff_multiple,Sinc_ground_i,power_diff);    
        end

        %PCA metrics
        if run_pca
%             if pca_type == 1 %leftover pca is light field
%     %             pca_mse(spec_c) = nansum((-Sinc_pca{spec_c}*coeff_multiple+Sinc_g).^2)/total_spots; %assume its white so no change over spectrum   
%                 recmet_dict.total.mse.pca(spec_c) = nan;
%                 recmet_dict.total.shape.pca(spec_c) = nan;
%                 recmet_dict.total.powdif.pca(spec_c) = nan;
%             else %separated into two components
                [recmet_dict.total.shape.pca(spec_c),recmet_dict.total.mse.pca(spec_c),recmet_dict.total.powdif.pca(spec_c),Sinc_pca_total{spec_c}] ...
                    = calculate_metrics_total(Sinc_pca_best,pca_best_i,spec_c,Hpca,coeff_multiple,Sinc_ground_i,power_diff);
%             end
        end

        %least-squares/computational periscopy metrics
        if do_ls
            Sinc_g_down = Sinc_g{ground_i}(round(linspace(1,length(Sinc_ground_i),length(Sinc_ls{1,spec_c}))));
            total_spots2 = length(Sinc_ls{1,spec_c});

            %need to upsample so that the error metrics align better with each
            %other
            Sinc_ls_up_total{spec_c} = interp1(Sinc_ls{spec_c}, linspace(1,total_spots2,num_vants));
%             Sinc_g_ls_up = interp1(Sinc_g_ls, linspace(1,total_spots2,total_spots));
            Sinc_g_ls_up = interp1(sum_cell({Sinc_g_ls},inten_coeff'.*sum(spec_ground,2)), linspace(1,total_spots2,num_vants));
              %original sample
    %         ls_best_mse(spec_c) = nansum((Sinc_ls{spec_c}*comp_peri_coeff*coeff_multiple-Sinc_g_ls*comp_peri_coeff).^2)/total_spots2;
    %         ls_best_shape_mse(spec_c) = nansum((Sinc_ls{spec_c}/norm(Sinc_ls{spec_c})-Sinc_g_ls/norm(Sinc_g_ls)).^2)/total_spots2;
    %         ls_best_pow_dif(spec_c) = power_diff(Sinc_ls{spec_c}*comp_peri_coeff*coeff_multiple,Sinc_g_ls*comp_peri_coeff);

                %up sample
            recmet_dict.total.mse.ls(spec_c) = nansum((Sinc_ls_up_total{spec_c}*comp_peri_coeff*coeff_multiple-Sinc_g_ls_up*comp_peri_coeff).^2)/num_vants;
            recmet_dict.total.shape.ls(spec_c) = nansum((Sinc_ls_up_total{spec_c}/norm(Sinc_ls_up_total{spec_c})-Sinc_g_ls_up/norm(Sinc_g_ls_up)).^2)/num_vants;
            recmet_dict.total.powdif.ls(spec_c) = power_diff(Sinc_ls_up_total{spec_c}*comp_peri_coeff*coeff_multiple,Sinc_g_ls_up*comp_peri_coeff);
        else
            recmet_dict.total.mse.ls(spec_c) = nan;
            recmet_dict.total.shape.ls(spec_c) = nan; 
            recmet_dict.total.powdif.ls(spec_c) = nan; 
        end

        if do_precon
            if ground_one_source
                Sinc_precon_g_all_up = interp1(Sinc_precon_onesource{spec_c}, linspace(1,num_vants_precon,num_vants));
                Sinc_precon_g_all_up(isnan(Sinc_precon_g_all_up)) = 0;
            else
                Sinc_precon_g_all_up = interp1(sum_cell(Sinc_precon_g,inten_coeff'.*spec_ground(:,spec_c)).*inten_coeff, linspace(1,num_vants_precon,num_vants));
                Sinc_precon_g_all_up(isnan(Sinc_precon_g_all_up)) = 0;
            end

            

            recmet_dict.total.mse.ls(spec_c) = nansum((Sinc_precon_up{spec_c}*coeff_multiple-Sinc_precon_g_all_up).^2)/num_vants;
            recmet_dict.total.shape.ls(spec_c) = nansum((Sinc_precon_up{spec_c}/norm(Sinc_precon_up{spec_c})-Sinc_precon_g_all_up/norm(Sinc_precon_g_all_up)).^2)/num_vants;
            recmet_dict.total.powdif.ls(spec_c) = power_diff(Sinc_precon_up{spec_c}*coeff_multiple,Sinc_precon_g_all_up);
            recmet_dict.total.mse.ls(spec_c) = nansum((Sinc_noprecon_up{spec_c}*coeff_multiple-Sinc_precon_g_all_up).^2)/num_vants;
            recmet_dict.total.shape.ls(spec_c) = nansum((Sinc_noprecon_up{spec_c}/norm(Sinc_noprecon_up{spec_c})-Sinc_precon_g_all_up/norm(Sinc_precon_g_all_up)).^2)/num_vants;
            recmet_dict.total.powdif.ls(spec_c) = power_diff(Sinc_noprecon_up{spec_c}*coeff_multiple,Sinc_precon_g_all_up);
        else
            recmet_dict.total.mse.precon(spec_c) = nan;
            recmet_dict.total.shape.precon(spec_c) = nan; 
            recmet_dict.total.powdif.precon(spec_c) = nan; 
            recmet_dict.total.mse.noprecon(spec_c) = nan;
            recmet_dict.total.shape.noprecon(spec_c) = nan; 
            recmet_dict.total.powdif.noprecon(spec_c) = nan; 

        end
    end

    %MS-DFOV
    for spec_ind = 1:length(msdfov_specs) %each msdfov spec
        spec_c = msdfov_specs(spec_ind);
        if ground_one_source
            Sinc_ground_i = Sinc_onesource{spec_c};
        else
            Sinc_ground_i = sum_cell(Sinc_g,inten_coeff'.*spec_ground(:,spec_c)); %is this right inten coeff?
        end

        if runRelaxation == 0
            recmet_dict.total.mse.msdfov(spec_ind) = nan;
            recmet_dict.total.shape.msdfov(spec_ind) = nan;
            recmet_dict.total.powdif.msdfov(spec_ind) = nan;
        else
            [recmet_dict.total.shape.msdfov(spec_ind),recmet_dict.total.mse.msdfov(spec_ind),recmet_dict.total.powdif.msdfov(spec_ind),Sinc_msdfov_total{spec_ind}] ...
                = calculate_msdfov_metrics_total(Sinc_msdfov_multispec,spec_ind,coeff_multiple,Sinc_g,power_diff,total_ver);
        end
    end
end



if total_ver==2 %summed over spec
    %BSS
    if ground_one_source
        Sinc_ground_i = sum_cell(Sinc_onesource);
    else
        Sinc_ground_i = sum_cell(Sinc_g,inten_coeff'.*sum(spec_ground,2));
    end
    
    coeff_multiple = 1;

    %standards MSEs
    recmet_dict.total.mse.spat = nansum((-sum_cell(Sinc_spat)+Sinc_ground_i).^2)/num_vants;
    recmet_dict.total.shape.spat = nansum((-sum_cell(Sinc_spat)/norm(sum_cell(Sinc_spat))+Sinc_ground_i/norm(Sinc_ground_i)).^2)/num_vants;
    recmet_dict.total.powdif.spat = power_diff(sum_cell(Sinc_spat),Sinc_ground_i);
    recmet_dict.total.mse.dfov = nansum((-sum_cell(Sinc)+Sinc_ground_i).^2)/num_vants;
    recmet_dict.total.shape.dfov = nansum((-sum_cell(Sinc)/norm(sum_cell(Sinc))+Sinc_ground_i/norm(Sinc_ground_i)).^2)/num_vants;
    recmet_dict.total.powdif.dfov = power_diff(sum_cell(Sinc),Sinc_ground_i);
    recmet_dict.total.mse.filt = nansum((-sum_cell(Sinc_filt)+Sinc_ground_i).^2)/num_vants;
    recmet_dict.total.shape.filt = nansum((-sum_cell(Sinc_filt)/norm(sum_cell(Sinc_filt))+Sinc_ground_i/norm(Sinc_ground_i)).^2)/num_vants;
    recmet_dict.total.powdif.filt = power_diff(sum_cell(Sinc_filt),Sinc_ground_i);
    recmet_dict.total.mse.filt2 = nansum((-sum_cell_2d(Sinc_filt2)+Sinc_ground_i).^2)/num_vants;
    recmet_dict.total.shape.filt2 = nansum((-sum_cell_2d(Sinc_filt2)/norm(sum_cell_2d(Sinc_filt2))+Sinc_ground_i/norm(Sinc_ground_i)).^2)/num_vants;
    recmet_dict.total.powdif.filt2 = power_diff(sum_cell_2d(Sinc_filt2),Sinc_ground_i);
    recmet_dict.total.mse.cp = nansum((-Sinc_cp+Sinc_ground_i).^2)/num_vants;
    recmet_dict.total.shape.cp = nansum((-Sinc_cp/norm(Sinc_cp)+Sinc_ground_i/norm(Sinc_ground_i)).^2)/num_vants;
    recmet_dict.total.powdif.cp = power_diff(-Sinc_cp,Sinc_ground_i);
    
    
    %NMF metrics
    if run_nmf == 0
        recmet_dict.total.mse.nmf = nan;
        recmet_dict.total.shape.nmf = nan;
        recmet_dict.total.powdif.nmf = nan;
    else
        [recmet_dict.total.shape.nmf,recmet_dict.total.mse.nmf,recmet_dict.total.powdif.nmf,Sinc_nmf_total] ...
                = calculate_metrics_total(Sinc_nmf_best,nmf_best_i,1,Hnmf,coeff_multiple,Sinc_ground_i,power_diff,total_ver);
    end

    %BSS metrics
    if run_bss == 0
        recmet_dict.total.mse.bss = nan;
        recmet_dict.total.shape.bss = nan;
        recmet_dict.total.powdif.bss = nan;
        Sinc_bss_total = nan;
    else
        [recmet_dict.total.shape.bss,recmet_dict.total.mse.bss,recmet_dict.total.powdif.bss,Sinc_bss_total] ...
                = calculate_metrics_total(Sinc_bss_best,bss_best_i,1,Hbss,coeff_multiple,Sinc_ground_i,power_diff,total_ver);
    end
    
    %Multilayer NMF metrics
    if run_mlay == 0
        recmet_dict.total.mse.mlay = nan;
        recmet_dict.total.shape.mlay = nan;
        recmet_dict.total.powdif.mlay = nan;
        Sinc_mlay_total = nan;
    else
        [recmet_dict.total.shape.mlay,recmet_dict.total.mse.mlay,recmet_dict.total.powdif.mlay,Sinc_mlay_total] ...
                = calculate_metrics_total(Sinc_mlay_best,mlay_best_i,1,Hmlay,coeff_multiple,Sinc_ground_i,power_diff,total_ver);
    end

    %SOBI/ICA metrics
    if run_sobi == 0
        recmet_dict.total.mse.sobi = nan;
        recmet_dict.total.shape.sobi = nan;
        recmet_dict.total.powdif.sobi = nan;
    else
        [recmet_dict.total.shape.sobi,recmet_dict.total.mse.sobi,recmet_dict.total.powdif.sobi,Sinc_sobi_total] ...
                = calculate_metrics_total(Sinc_sobi_best,sobi_best_i,1,Hsobi,coeff_multiple,Sinc_ground_i,power_diff,total_ver);
    end

    %%JADE/ICA metrics
    if run_jade == 0
        recmet_dict.total.mse.jade = nan;
        recmet_dict.total.shape.jade = nan;
        recmet_dict.total.powdif.jade = nan;
    else
        if bss_ver==2
            if dfov_params.smooth_lincs
                for i=1:length(Sinc_jade)
                    f = fit((1:length(Sinc_jade{i}))',Sinc_jade{i}','smoothingspline','SmoothingParam',linc_smooth);
                    Sinc_jade{i} = f(1:length(Sinc_jade{i}))';
                end
            end

            [recmet_dict.total.shape.jade,recmet_dict.total.mse.jade,recmet_dict.total.powdif.jade,Sinc_jade_total] ...
                    = calculate_metrics_total_allcomp(Sinc_jade,length(Sinc_jade),1,Hjade,coeff_multiple,Sinc_ground_i,power_diff,total_ver);
        else    
            [recmet_dict.total.shape.jade,recmet_dict.total.mse.jade,recmet_dict.total.powdif.jade,Sinc_jade_total] ...
                    = calculate_metrics_total(Sinc_jade_best,jade_best_i,1,Hjade,coeff_multiple,Sinc_ground_i,power_diff,total_ver);
        end
    end

    %PCA metrics
    if run_pca
%         if pca_type == 1 %leftover pca is light field
% %             pca_mse(spec_c) = nansum((-Sinc_pca{spec_c}*coeff_multiple+Sinc_g).^2)/total_spots; %assume its white so no change over spectrum   
%             recmet_dict.total.mse.pca(spec_c) = nan;
%             recmet_dict.total.shape.pca(spec_c) = nan;
%             recmet_dict.total.powdif.pca(spec_c) = nan;
%         else %separated into two components
            [recmet_dict.total.shape.pca,recmet_dict.total.mse.pca,recmet_dict.total.powdif.pca,Sinc_pca_total] ...
                = calculate_metrics_total(Sinc_pca_best,pca_best_i,1,Hpca,coeff_multiple,Sinc_ground_i,power_diff,total_ver);
%         end
    end

    %least-squares/computational periscopy metrics
    if do_ls
        Sinc_g_down = Sinc_ground_i(round(linspace(1,length(Sinc_ground_i),length(Sinc_ls{1,spec_c}))));
        total_spots2 = length(Sinc_ls{1,spec_c});

        %need to upsample so that the error metrics align better with each
        %other
%         Sinc_ls_up = interp1(Sinc_ls{spec_c}, linspace(1,total_spots2,total_spots));
        Sinc_ls_up_total = interp1(sum_cell(Sinc_ls), linspace(1,total_spots2,num_vants));
        Sinc_g_ls_up = interp1(sum_cell({Sinc_g_ls},inten_coeff'.*sum(spec_ground,2)), linspace(1,total_spots2,num_vants));

          %original sample
%         ls_best_mse(spec_c) = nansum((Sinc_ls{spec_c}*comp_peri_coeff*coeff_multiple-Sinc_g_ls*comp_peri_coeff).^2)/total_spots2;
%         ls_best_shape_mse(spec_c) = nansum((Sinc_ls{spec_c}/norm(Sinc_ls{spec_c})-Sinc_g_ls/norm(Sinc_g_ls)).^2)/total_spots2;
%         ls_best_pow_dif(spec_c) = power_diff(Sinc_ls{spec_c}*comp_peri_coeff*coeff_multiple,Sinc_g_ls*comp_peri_coeff);

            %up sample
        recmet_dict.total.mse.ls = nansum((Sinc_ls_up_total*comp_peri_coeff*coeff_multiple-Sinc_g_ls_up*comp_peri_coeff).^2)/num_vants;
        recmet_dict.total.shape.ls = nansum((Sinc_ls_up_total/norm(Sinc_ls_up_total)-Sinc_g_ls_up/norm(Sinc_g_ls_up)).^2)/num_vants;
        recmet_dict.total.powdif.ls = power_diff(Sinc_ls_up_total*comp_peri_coeff*coeff_multiple,Sinc_g_ls_up*comp_peri_coeff);
    else
        recmet_dict.total.mse.ls = nan; 
        recmet_dict.total.shape.ls = nan; 
        recmet_dict.total.powdif.ls = nan; 
    end


    if do_precon
        if ground_one_source
            Sinc_precon_g_all_up = interp1(sum_cell(Sinc_precon_onesource), linspace(1,num_vants_precon,num_vants));
            Sinc_precon_g_all_up(isnan(Sinc_precon_g_all_up)) = 0;
        else
            Sinc_precon_g_all_up = interp1(sum_cell(Sinc_precon_g,inten_coeff'.*sum(spec_ground,2)), linspace(1,num_vants_precon,num_vants));
            Sinc_precon_g_all_up(isnan(Sinc_precon_g_all_up)) = 0;
        end
        Sinc_precon_up_summed = sum_cell(Sinc_precon_up);
        Sinc_precon_up_summed(isnan(Sinc_precon_up_summed)) = 0;
        Sinc_noprecon_up_summed = sum_cell(Sinc_noprecon_up);
        Sinc_noprecon_up_summed(isnan(Sinc_noprecon_up_summed)) = 0;

        recmet_dict.total.mse.precon = nansum((Sinc_precon_up_summed*coeff_multiple-Sinc_precon_g_all_up).^2)/num_vants;
        recmet_dict.total.shape.precon = nansum((Sinc_precon_up_summed/norm(Sinc_precon_up_summed)-Sinc_precon_g_all_up/norm(Sinc_precon_g_all_up)).^2)/num_vants;
        recmet_dict.total.powdif.precon = power_diff(Sinc_precon_up_summed*coeff_multiple,Sinc_precon_g_all_up);
        recmet_dict.total.mse.noprecon = nansum((Sinc_noprecon_up_summed*coeff_multiple-Sinc_precon_g_all_up).^2)/num_vants;
        recmet_dict.total.shape.noprecon = nansum((Sinc_noprecon_up_summed/norm(Sinc_noprecon_up_summed)-Sinc_precon_g_all_up/norm(Sinc_precon_g_all_up)).^2)/num_vants;
        recmet_dict.total.powdif.noprecon = power_diff(Sinc_noprecon_up_summed*coeff_multiple,Sinc_precon_g_all_up);
    else
        recmet_dict.total.mse.precon = nan;
        recmet_dict.total.shape.precon = nan; 
        recmet_dict.total.powdif.precon = nan; 
        recmet_dict.total.mse.noprecon = nan;
        recmet_dict.total.shape.noprecon = nan; 
        recmet_dict.total.powdif.noprecon = nan; 

    end



    %MS-DFOV
    if runRelaxation == 0
        recmet_dict.total.mse.msdfov = nan;
        recmet_dict.total.shape.msdfov = nan;
        recmet_dict.total.powdif.msdfov = nan;
    else
        if ground_one_source
            specweights = zeros(size(spec_ground,2));
            specweights(msdfov_specs) = 1;
            Sinc_ground_i = sum_cell(Sinc_onesource,specweights);
        else
            Sinc_ground_i = sum_cell(Sinc_g,inten_coeff'.*sum(spec_ground(:,msdfov_specs),2));
        end
        [recmet_dict.total.shape.msdfov,recmet_dict.total.mse.msdfov,recmet_dict.total.powdif.msdfov,Sinc_msdfov_total] ...
            = calculate_msdfov_metrics_total(Sinc_msdfov_multispec,1,coeff_multiple,Sinc_ground_i,power_diff,total_ver);
    end
end

%special error for single spectra filtered
act_specs = [];
for i=1:length(Sinc_singfilt_dw)
    if abs(Sinc_singfilt_dw{i}) ~= 0
        act_specs(i) = 1;
    else
        act_specs(i) = 0;
    end
end

if ground_one_source
    Sinc_ground_i = sum_cell(Sinc_onesource,act_specs);
else
    Sinc_ground_i = sum_cell(Sinc_g,inten_coeff'.*sum(spec_ground,2));
end

recmet_dict.total.mse.singfilt = nansum((-sum_cell(Sinc_singfilt)+Sinc_ground_i).^2)/num_vants;
recmet_dict.total.shape.singfilt = nansum((-sum_cell(Sinc_singfilt)/norm(sum_cell(Sinc_singfilt))+Sinc_ground_i/norm(Sinc_ground_i)).^2)/num_vants;
recmet_dict.total.powdif.singfilt = power_diff(sum_cell(Sinc_singfilt),Sinc_ground_i);









